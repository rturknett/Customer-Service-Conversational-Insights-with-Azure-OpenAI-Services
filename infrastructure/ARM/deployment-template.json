{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "resourceGroupName": {
            "defaultValue": "[resourceGroup().name]",
            "type": "string"
        },
        "location": {
            "defaultValue": "[resourceGroup().location]",
            "type": "string"
        },
        "storageAccountName": {
            "defaultValue": "[concat('csci', substring(uniqueString(resourceGroup().id),0,6))]",
            "type": "String"
        },
        "functionName": {
            "defaultValue": "[concat('csci', substring(uniqueString(resourceGroup().id),0,6))]",
            "type": "String"
        },
        "searchServicesName": {
            "defaultValue": "[concat('csci', substring(uniqueString(resourceGroup().id),0,6))]",
            "type": "String"
        },
        "applicationInsightsName": {
            "defaultValue": "[concat('csci', substring(uniqueString(resourceGroup().id),0,6))]",
            "type": "String"
        },
        "webUiName": {
            "type": "string",
            "defaultValue": "[concat('csci', substring(uniqueString(resourceGroup().id),0,6), '-ui')]"
        },
        "hostingPlanName": {
            "type": "string",
            "defaultValue": "[concat('csci', substring(uniqueString(resourceGroup().id),0,6), '-asp')]"
        },
        "cognitiveServiceName": {
            "type": "string",
            "defaultValue": "[concat('csci', substring(uniqueString(resourceGroup().id),0,6))]"
        },
        "speechServiceName": {
            "type": "string",
            "defaultValue": "[concat('csci', substring(uniqueString(resourceGroup().id),0,6), 'speech')]"
        },
        "speechAudioLocale": {
            "defaultValue": "en-US | English (United States)",
            "type": "string",
            "allowedValues": [
                "ar-BH | Arabic (Bahrain)",
                "ar-EG | Arabic (Egypt)",
                "ar-SY | Arabic (Syria)",
                "ca-ES | Catalan",
                "da-DK | Danish (Denmark)",
                "de-DE | German (Germany)",
                "en-AU | English (Australia)",
                "en-CA | English (Canada)",
                "en-GB | English (United Kingdom)",
                "en-IN | English (India)",
                "en-NZ | English (New Zealand)",
                "en-US | English (United States)",
                "es-ES | Spanish (Spain)",
                "es-MX | Spanish (Mexico)",
                "fi-FI | Finnish (Finland)",
                "fr-CA | French (Canada)",
                "fr-FR | French (France)",
                "gu-IN | Gujarati (Indian)",
                "hi-IN | Hindi (India)",
                "it-IT | Italian (Italy)",
                "ja-JP | Japanese (Japan)",
                "ko-KR | Korean (Korea)",
                "mr-IN | Marathi (India)",
                "nb-NO | Norwegian (Bokm√•l)",
                "nl-NL | Dutch (Netherlands)",
                "pl-PL | Polish (Poland)",
                "pt-BR | Portuguese (Brazil)",
                "pt-PT | Portuguese (Portugal)",
                "ru-RU | Russian (Russia)",
                "sv-SE | Swedish (Sweden)",
                "ta-IN | Tamil (India)",
                "te-IN | Telugu (India)",
                "th-TH | Thai (Thailand)",
                "tr-TR | Turkish (Turkey)",
                "zh-CN | Chinese (Mandarin, simplified)",
                "zh-HK | Chinese (Cantonese, Traditional)",
                "zh-TW | Chinese (Taiwanese Mandarin)"
            ]
        },
        "speechCustomModelId": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "The id of the custom model for transcription. If empty, the base model will be selected."
            }
        },
        "speechCustomEndpoint": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Enter the address of your private endpoint here (e.g. https://mycustomendpoint.cognitiveservices.azure.com/) if you are connecting with a private endpoint"
            }
        },
        "speechProfanityFilterMode": {
            "defaultValue": "None",
            "type": "String",
            "allowedValues": [
                "None",
                "Removed",
                "Tags",
                "Masked"
            ],
            "metadata": {
                "description": "The requested profanity filter mode."
            }
        },
        "speechPunctuationMode": {
            "defaultValue": "DictatedAndAutomatic",
            "type": "String",
            "allowedValues": [
                "None",
                "Dictated",
                "Automatic",
                "DictatedAndAutomatic"
            ],
            "metadata": {
                "description": "The requested punctuation mode."
            }
        },
        "speechAddDiarization": {
            "defaultValue": true,
            "type": "bool",
            "metadata": {
                "description": "A value indicating whether diarization (speaker separation) is requested."
            }
        },
        "speechAddWordLevelTimestamps": {
            "defaultValue": true,
            "type": "bool",
            "metadata": {
                "description": "A value indicating whether word level timestamps are requested."
            }
        },
        "audio_user_channel": {
            "defaultValue": "1",
            "type": "String",
            "allowedValues": [
                "0",
                "1"
            ],
            "metadata": {
                "description": "For stereo recording, input channel of user's audio."
            }
        },
        "speechSentimentAnalysis": {
            "defaultValue": "None",
            "type": "String",
            "allowedValues": [
                "None",
                "UtteranceLevel",
                "AudioLevel"
            ],
            "metadata": {
                "description": "A value indicating whether sentiment analysis is requested (either per utterance or per audio). Will only be performed if a Text Analytics Key and Region is provided."
            }
        },
        "speechPiiRedaction": {
            "defaultValue": "None",
            "type": "String",
            "allowedValues": [
                "None",
                "UtteranceAndAudioLevel"
            ],
            "metadata": {
                "description": "A value indicating whether personally identifiable information (PII) redaction is requested. Will only be performed if a Text Analytics Key and Region is provided."
            }
        },
        "speechSqlAdministratorLogin": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The administrator username of the SQL Server, which is used to gain insights of the audio with the provided PowerBI scripts. If it is left empty, no SQL server/database will be created."
            }
        },
        "speechSqlAdministratorLoginPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "The administrator password of the SQL Server. If it is left empty, no SQL server/database will be created."
            }
        },
        "speechDeploymentId": {
            "type": "string",
            "defaultValue": "[utcNow()]",
            "metadata": {
                "description": "Id that will be suffixed to all created resources to identify resources of a certain deployment. Leave as is to use timestamp as deployment id."
            }
        },
        "serviceBusName": {
            "type": "string",
            "defaultValue": "[concat('csci', substring(uniqueString(resourceGroup().id),0,6))]",
            "metadata": {
                "description": "The name of the Service Bus namespace to use."
            }
        },
        "OPENAI_API_BASE": {
            "type": "string",
            "defaultValue": "https://YOUR_OPENAI_RESOURCE_NAME.openai.azure.com/",
            "metadata": {
                "description": "The base URL for the OpenAI API"
            }
        },
        "OPENAI_API_KEY": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "The API key for the OpenAI API"
            }
        },
        "OPENAI_DEPLOYMENT_NAME": {
            "type": "string",
            "defaultValue": "gpt-35-turbo",
            "metadata": {
                "description": "The name of the OpenAI deployment to use"
            }
        },
        "OPENAI_MODEL_TYPE":{
            "type": "string",
            "allowedValues": [
                "chat",
                "text"
            ],
            "metadata": {
                "description": "Use chat for Chat completion models (like gpt-35-turbo) or text for Text completion models (like text-davinci-003)"
            }
        },
        "OPENAI_TEMPERATURE": {
            "type": "string",
            "defaultValue": "0.7",
            "metadata": {
                "description": "The temperature to use for the OpenAI API"
            }
        },
        "OPENAI_MAX_TOKENS": {
            "type": "string",
            "defaultValue": "800",
            "metadata": {
                "description": "The maximum number of tokens to use for the OpenAI API response"
            }
        },
        "OPENAI_TOP_P": {
            "type": "string",
            "defaultValue": "0.95",
            "metadata": {
                "description": "The top_p to use for the OpenAI API"
            }
        },
        "OPENAI_FREQUENCY_PENALTY": {
            "type": "string",
            "defaultValue": "0",
            "metadata": {
                "description": "The frequency penalty to use for the OpenAI API"
            }
        },
        "OPENAI_PRESENCE_PENALTY": {
            "type": "string",
            "defaultValue": "0",
            "metadata": {
                "description": "The presence penalty to use for the OpenAI API"
            }
        },
        "OPENAI_PROMPT": {
            "type": "string",
            "defaultValue": "You are a JSON formatter for extracting information out of a single chat conversation. Summarize the conversation, key: summary . Is the customer satisfied with the agent interaction (Yes or No), key: satisfied . Identify the origin city of travel,key: OriginCity . Identify the destination city of travel,key : DestinationCity . Identify the single primary complaint of the conversation in 6 words or less,key: Complaint . Identify the single primary compliment of the conversation in 6 words or less,key: Compliment . Identify the name of hotel that was mentioned,key: Hotel . Identify the name of airline if mentioned,key: Airline . Identify the name of the agent,key: AgentName . Answer in JSON machine-readable format, using the keys from above. Pretty print the JSON and make sure that it is properly closed at the end and do not generate any other content.",
            "metadata": {
                "description": "The prompt to use for the OpenAI API"
            }
        },
        "OPENAI_PROMPT_KEYS": {
            "type": "string",
            "defaultValue": "summary:Edm.String:False,satisfied:Edm.String:True,OriginCity:Edm.String:False,DestinationCity:Edm.String:False, Complaint:Edm.String:False, Compliment:Edm.String:False,Hotel:Edm.String:False,Airline:Edm.String:False,AgentName:Edm.String:False",
            "metadata": {
                "description": "The prompt keys to use for the OpenAI API. Format: key,SearchType,Facetable e.g. key1:Edm.String:False,key2:Edm.String:True,key3:Edm.String:True"
            }
        },
        "newGuid": {
            "type": "string",
            "defaultValue": "[newGuid()]"
        }
    },
    "variables": {
        "openAIFunctionName": "[concat(parameters('functionName'),'-openai')]",
        "clientKey": "[concat(uniqueString(guid(resourceGroup().id, deployment().name)), parameters('newGuid'), 'Tg2%')]"
    },
    "resources": [
        {
            "type": "Microsoft.ServiceBus/namespaces",
            "apiVersion": "2018-01-01-preview",
            "name": "[parameters('ServiceBusName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard",
                "tier": "Standard"
            },
            "properties": {
                "zoneRedundant": false
            }
        },
        {
            "type": "Microsoft.ServiceBus/namespaces/queues",
            "apiVersion": "2017-04-01",
            "name": "[concat(parameters('ServiceBusName'), '/openai_queue')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces', parameters('ServiceBusName'))]"
            ],
            "properties": {
                "lockDuration": "PT4M",
                "maxSizeInMegabytes": 5120,
                "requiresDuplicateDetection": false,
                "requiresSession": false,
                "defaultMessageTimeToLive": "P10675199DT2H48M5.4775807S",
                "deadLetteringOnMessageExpiration": false,
                "enableBatchedOperations": false,
                "duplicateDetectionHistoryTimeWindow": "PT10M",
                "maxDeliveryCount": 1,
                "status": "Active",
                "autoDeleteOnIdle": "P10675199DT2H48M5.4775807S",
                "enablePartitioning": false,
                "enableExpress": false
            }
        },
        {
            "type": "Microsoft.ServiceBus/namespaces/queues",
            "apiVersion": "2017-04-01",
            "name": "[concat(parameters('ServiceBusName'), '/openai_results_queue')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces', parameters('ServiceBusName'))]"
            ],
            "properties": {
                "lockDuration": "PT4M",
                "maxSizeInMegabytes": 5120,
                "requiresDuplicateDetection": false,
                "requiresSession": false,
                "defaultMessageTimeToLive": "P10675199DT2H48M5.4775807S",
                "deadLetteringOnMessageExpiration": false,
                "enableBatchedOperations": false,
                "duplicateDetectionHistoryTimeWindow": "PT10M",
                "maxDeliveryCount": 1,
                "status": "Active",
                "autoDeleteOnIdle": "P10675199DT2H48M5.4775807S",
                "enablePartitioning": false,
                "enableExpress": false
            }
        },
        {
            "type": "Microsoft.CognitiveServices/accounts",
            "apiVersion": "2017-04-18",
            "name": "[parameters('cognitiveServiceName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "S0"
            },
            "kind": "CognitiveServices",
            "properties": {
                "statisticsEnabled": false
            }
        },
        {
            "type": "Microsoft.CognitiveServices/accounts",
            "apiVersion": "2021-04-30",
            "name": "[parameters('speechServiceName')]",
            "location": "[parameters('location')]",
            "kind": "SpeechServices",
            "sku": {
                "name": "S0"
            },
            "properties": {

            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "name": "linkedTemplate",
            "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveServiceName'))]",
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('speechServiceName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/Azure-Samples/cognitive-services-speech-sdk/master/samples/ingestion/ingestion-client/Setup/ArmTemplateBatch.json",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "StorageAccount": {
                        "value": "[parameters('storageAccountName')]"
                    },
                    "Locale": {
                        "value": "[parameters('speechAudioLocale')]"
                    },
                    "CustomModelId": {
                        "value": "[parameters('speechCustomModelId')]"
                    },
                    "AzureSpeechServicesKey": {
                        "value": "[listKeys(resourceId(parameters('resourceGroupName'),'Microsoft.CognitiveServices/accounts', parameters('speechServiceName')), '2017-04-18').key1]"
                    },
                    "AzureSpeechServicesRegion": {
                        "value": "[parameters('location')]"
                    },
                    "CustomEndpoint": {
                        "value": "[parameters('speechCustomEndpoint')]"
                    },
                    "ProfanityFilterMode": {
                        "value": "[parameters('speechProfanityFilterMode')]"
                    },
                    "PunctuationMode": {
                        "value": "[parameters('speechPunctuationMode')]"
                    },
                    "AddDiarization": {
                        "value": "[parameters('speechAddDiarization')]"
                    },
                    "AddWordLevelTimestamps": {
                        "value": "[parameters('speechAddWordLevelTimestamps')]"
                    },
                    "TextAnalyticsKey": {
                        "value": "[listKeys(resourceId(parameters('resourceGroupName'),'Microsoft.CognitiveServices/accounts', parameters('cognitiveServiceName')), '2017-04-18').key1]"
                    },
                    "TextAnalyticsRegion": {
                        "value": "[parameters('location')]"  
                    },
                    "SentimentAnalysis": {
                        "value": "[parameters('speechSentimentAnalysis')]"
                    },
                    "PiiRedaction": {
                        "value": "[parameters('speechPiiRedaction')]"
                    },
                    "SqlAdministratorLogin": {
                        "value": "[parameters('speechSqlAdministratorLogin')]"
                    },
                    "SqlAdministratorLoginPassword": {
                        "value": "[parameters('speechSqlAdministratorLoginPassword')]"
                    },
                    "DeploymentId": {
                        "value": "[parameters('speechDeploymentId')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Search/searchServices",
            "apiVersion": "2021-04-01-preview",
            "name": "[parameters('searchServicesName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "standard"
            },
            "properties": {
                "replicaCount": 1,
                "partitionCount": 1,
                "hostingMode": "Default",
                "publicNetworkAccess": "Enabled",
                "networkRuleSet": {
                    "ipRules": [],
                    "bypass": "None"
                },
                "encryptionWithCmk": {
                    "enforcement": "Unspecified"
                },
                "disableLocalAuth": false,
                "authOptions": {
                    "apiKeyOnly": {}
                },
                "disabledDataExfiltrationOptions": [],
                "semanticSearch": "disabled"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2021-08-01",
            "name": "[parameters('storageAccountName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_RAGRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "defaultToOAuthAuthentication": false,
                "allowCrossTenantReplication": true,
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": true,
                "allowSharedKeyAccess": true,
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "requireInfrastructureEncryption": false,
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2021-08-01",
            "name": "[concat(parameters('storageAccountName'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            ],
            "sku": {
                "name": "Standard_RAGRS",
                "tier": "Standard"
            },
            "properties": {
                "changeFeed": {
                    "enabled": false
                },
                "restorePolicy": {
                    "enabled": false
                },
                "containerDeleteRetentionPolicy": {
                    "enabled": true,
                    "days": 7
                },
                "cors": {
                    "corsRules": []
                },
                "deleteRetentionPolicy": {
                    "enabled": true,
                    "days": 7
                },
                "isVersioningEnabled": false
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2021-08-01",
            "name": "[concat(parameters('storageAccountName'), '/default/scm-releases')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            ],
            "properties": {
                "immutableStorageWithVersioning": {
                    "enabled": false
                },
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2021-08-01",
            "name": "[concat(parameters('storageAccountName'), '/default/conversationkm-full')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            ],
            "properties": {
                "immutableStorageWithVersioning": {
                    "enabled": false
                },
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2021-08-01",
            "name": "[concat(parameters('storageAccountName'), '/default/conversationkm-raw')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            ],
            "properties": {
                "immutableStorageWithVersioning": {
                    "enabled": false
                },
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Insights/components",
            "apiVersion": "2020-02-02",
            "name": "[parameters('applicationInsightsName')]",
            "location": "[parameters('location')]",
            "tags": {
                "[concat('hidden-link:', resourceId('Microsoft.Web/sites', parameters('applicationInsightsName')))]": "Resource"
            },
            "properties": {
                "Application_Type": "web"
            },
            "kind": "web"
        },
        {
            "apiVersion": "2020-06-01",
            "name": "[parameters('hostingPlanName')]",
            "type": "Microsoft.Web/serverfarms",
            "location": "[parameters('location')]",
            "properties": {
                "name": "[parameters('hostingPlanName')]",
                "workerSizeId": "1",
                "reserved": true,
                "numberOfWorkers": "1"
            },
            "sku": {
                "Tier": "Standard",
                "Name": "S1"
            },
            "kind": "linux"
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2021-03-01",
            "name": "[parameters('functionName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]",
                "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "kind": "functionapp,linux",
            "properties": {
                "enabled": true,
                "hostNameSslStates": [
                    {
                        "name": "[concat(parameters('functionName'), '.azurewebsites.net')]",
                        "sslState": "Disabled",
                        "hostType": "Standard"
                    },
                    {
                        "name": "[concat(parameters('functionName'), '.scm.azurewebsites.net')]",
                        "sslState": "Disabled",
                        "hostType": "Repository"
                    }
                ],
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]",
                "reserved": true,
                "isXenon": false,
                "hyperV": false,
                "siteConfig": {
                    "numberOfWorkers": 1,
                    "linuxFxVersion": "Python|3.8",
                    "acrUseManagedIdentityCreds": false,
                    "alwaysOn": true,
                    "http20Enabled": false,
                    "functionAppScaleLimit": 200,
                    "minimumElasticInstanceCount": 0,
                    "appSettings": [
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';AccountKey=', listKeys(resourceId(parameters('resourceGroupName'),'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2019-04-01').keys[0].value,';EndpointSuffix=core.windows.net')]"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~4"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "python"
                        },
                        {
                            "name": "WEBSITE_RUN_FROM_PACKAGE",
                            "value": "https://csciblob.blob.core.windows.net/deploy/csci-audio-dep.zip"
                        }
                    ]
                },
                "scmSiteAlsoStopped": false,
                "clientAffinityEnabled": false,
                "clientCertEnabled": false,
                "clientCertMode": "Required",
                "hostNamesDisabled": false,
                "customDomainVerificationId": "368FC673F884D479178EAA3E86A207CEE6277CB01005D1F653B2DAF0A3B2614D",
                "containerSize": 1536,
                "dailyMemoryTimeQuota": 0,
                "httpsOnly": false,
                "redundancyMode": "None",
                "storageAccountRequired": false,
                "keyVaultReferenceIdentity": "SystemAssigned"
            }
        },
        {
            "type": "Microsoft.Web/sites/config",
            "apiVersion": "2021-03-01",
            "name": "[format('{0}/{1}', parameters('functionName'), 'appsettings')]",
            "kind": "string",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionName'))]",
                "[resourceId('Microsoft.Web/sites', variables('openAIFunctionName'))]",
                "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]"
            ],
            "properties": {
                "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2015-05-01').InstrumentationKey]",
                "AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';AccountKey=', listKeys(resourceId(parameters('resourceGroupName'),'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2019-04-01').keys[0].value,';EndpointSuffix=core.windows.net')]",
                "dimensions": "scenario,channelId,entities.intent,entities.dst_city,entities.or_city,entities.n_adults,entities.NO_RESULT,entities.seat,entities.downtown,entities.breakfast,entities.category",
                "defined_events": "IntentRecognized",
                "conversationalkm_STORAGE": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';AccountKey=', listKeys(resourceId(parameters('resourceGroupName'),'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2019-04-01').keys[0].value,';EndpointSuffix=core.windows.net')]",
                "telemetry_processed": "conversationkm-full",
                "profanity_lang": "eng",
                "cognitive_services_region": "[parameters('location')]",
                "table_sample_data": "botconvevals",
                "cognitive_services_key": "[listKeys(resourceId(parameters('resourceGroupName'),'Microsoft.CognitiveServices/accounts', parameters('cognitiveServiceName')), '2017-04-18').key1]",
                "search_account": "[parameters('searchServicesName')]",
                "search_api_key": "[listAdminKeys(concat('Microsoft.Search/searchServices/', parameters('searchServicesName')), '2021-04-01-preview').primaryKey]",
                "search_api_version": "2021-04-30-preview",
                "search_data_source": "[parameters('storageAccountName')]",
                "search_index": "conversational-index",
                "search_skillset": "conversational-skillset",
                "search_indexer": "conversational-km-indexer",
                "connection_string": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';AccountKey=', listKeys(resourceId(parameters('resourceGroupName'),'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2019-04-01').keys[0].value,';EndpointSuffix=core.windows.net')]",
                "cognitive_search_data_source_container": "conversationkm-full",
                "cognitive_search_knowledge_store_container_object": "knowledge-store",
                "cognitive_search_knowledge_store_container_files": "knowledge-store-images",
                "cognitive_search_knowledge_store_table_document": "documentstable",
                "cognitive_search_knowledge_store_table_keyphrases": "keyphrasestable",
                "FUNCTIONS_EXTENSION_VERSION": "~4",
                "FUNCTIONS_WORKER_RUNTIME": "python",
                "WEBSITE_RUN_FROM_PACKAGE": "https://csciblob.blob.core.windows.net/deploy/csci-audio-dep.zip",
                "function_name": "[parameters('functionName')]",
                "function_key": "[variables('clientKey')]",
                "openai_function_name": "[variables('openAIFunctionName')]",
                "openai_function_key": "[variables('clientKey')]",
                "deployment_type": "audio",
                "OPENAI_PROMPT_KEYS": "[parameters('OPENAI_PROMPT_KEYS')]",
                "audio_user_channel": "[parameters('audio_user_channel')]"
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "name": "[parameters('webUiName')]",
            "apiVersion": "2020-06-01",
            "location": "[parameters('location')]",
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]"
            ],
            "properties": {
                "siteConfig": {
                    "linuxFxVersion": "DOCKER|cscicontainer.azurecr.io/csci-ui:latest"
                },
                "name": "[parameters('webUiName')]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]"
            }
        },
        {
            "type": "Microsoft.Web/sites/config",
            "apiVersion": "2021-03-01",
            "name": "[format('{0}/{1}', parameters('webUiName'), 'appsettings')]",
            "kind": "string",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('webUiName'))]"
            ],
            "properties": {
                "SearchServiceName": "[parameters('searchServicesName')]",
                "SearchApiKey": "[listAdminKeys(concat('Microsoft.Search/searchServices/', parameters('searchServicesName')), '2021-04-01-preview').primaryKey]",
                "SearchIndexName": "conversational-index",
                "StorageAccountName": "[parameters('storageAccountName')]",
                "StorageAccountKey": "[listKeys(resourceId(parameters('resourceGroupName'),'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2019-04-01').keys[0].value]",
                "StorageContainerAddress": "[concat('https://', parameters('storageAccountName') ,'.blob.core.windows.net/audio-input')]",
                "StorageContainerAddress2": "[concat('https://', parameters('storageAccountName') ,'.blob.core.windows.net/conversationkm-full')]",
                "KeyField": "metadata_storage_path",
                "IsPathBase64Encoded": true
            }
        },
        {
            "type": "Microsoft.Web/sites/host/functionKeys",
            "apiVersion": "2018-11-01",
            "name": "[concat(parameters('functionName'), '/default/clientKey')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionName'))]",
                "WaitFunctionDeploymentSection"
            ],
            "properties": {
                "name": "clientKey",
                "value": "[variables('clientKey')]"
            }
        },
        {
            "type": "Microsoft.Web/sites/host/functionKeys",
            "apiVersion": "2018-11-01",
            "name": "[concat(variables('openAIFunctionName'), '/default/clientKey')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('openAIFunctionName'))]",
                "WaitFunctionDeploymentSection"
            ],
            "properties": {
                "name": "clientKey",
                "value": "[variables('clientKey')]"
            }
        },
        {
            "apiVersion": "2018-11-01",
            "name": "[variables('openAIFunctionName')]",
            "type": "Microsoft.Web/sites",
            "kind": "functionapp,linux",
            "location": "[resourceGroup().location]",
            "tags": {

            },
            "dependsOn": [
                "[concat('Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]",
                "[concat('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]",
                "[concat('Microsoft.ServiceBus/namespaces/', parameters('serviceBusName'))]"
            ],
            "properties": {
                "name": "[variables('openAIFunctionName')]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2015-05-01').InstrumentationKey]"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~4"
                        },
                        {
                            "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
                            "value": "false"
                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('storageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2019-06-01').keys[0].value,';EndpointSuffix=','core.windows.net')]"
                        },
                        {
                            "name": "AzureServiceBusConnectionString",
                            "value": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/AuthorizationRules', parameters('serviceBusName'),'RootManageSharedAccessKey'),'2015-08-01').primaryConnectionString]"
                        },
                        {
                            "name": "OPENAI_API_BASE",
                            "value": "[parameters('OPENAI_API_BASE')]"
                        },
                        {
                            "name": "OPENAI_API_KEY",
                            "value": "[parameters('OPENAI_API_KEY')]"
                        },
                        {
                            "name": "OPENAI_DEPLOYMENT_NAME",
                            "value": "[parameters('OPENAI_DEPLOYMENT_NAME')]"
                        },
                        {
                            "name": "OPENAI_TEMPERATURE",
                            "value": "[parameters('OPENAI_TEMPERATURE')]"
                        },
                        {
                            "name": "OPENAI_MAX_TOKENS",
                            "value": "[parameters('OPENAI_MAX_TOKENS')]"
                        },
                        {
                            "name": "OPENAI_TOP_P",
                            "value": "[parameters('OPENAI_TOP_P')]"
                        },
                        {
                            "name": "OPENAI_FREQUENCY_PENALTY",
                            "value": "[parameters('OPENAI_FREQUENCY_PENALTY')]"
                        },
                        {
                            "name": "OPENAI_PRESENCE_PENALTY",
                            "value": "[parameters('OPENAI_PRESENCE_PENALTY')]"
                        },
                        {
                            "name": "OPENAI_PROMPT",
                            "value": "[parameters('OPENAI_PROMPT')]"
                        },
                        {
                            "name": "OPENAI_PROMPT_KEYS",
                            "value": "[parameters('OPENAI_PROMPT_KEYS')]"
                        },
                        {
                            "name": "AZURE_SEARCH_SERVICE_NAME",
                            "value": "[parameters('searchServicesName')]"
                        },
                        {
                            "name": "AZURE_SEARCH_INDEX_NAME",
                            "value": "conversational-index"
                        },
                        {
                            "name": "AZURE_SEARCH_API_KEY",
                            "value": "[listAdminKeys(concat('Microsoft.Search/searchServices/', parameters('searchServicesName')), '2021-04-01-preview').primaryKey]"
                        },
                        {
                            "name": "AZURE_SEARCH_API_VERSION",
                            "value": "2021-04-30-preview"
                        },
                        {
                            "name": "OPENAI_MODEL_TYPE",
                            "value": "[parameters('OPENAI_MODEL_TYPE')]"
                        }
                    ],
                    "cors": {
                        "allowedOrigins": [
                            "https://portal.azure.com"
                        ]
                    },
                    "use32BitWorkerProcess": false,
                    "ftpsState": "FtpsOnly",
                    "linuxFxVersion": "DOCKER|fruocco/acs-oai-async:latest",
                    "appCommandLine": "",
                    "alwaysOn": true
                },
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]",
                "clientAffinityEnabled": false,
                "virtualNetworkSubnetId": null,
                "httpsOnly": true
            }
        },
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2020-10-01",
            "kind": "AzurePowerShell",
            "name": "WaitFunctionDeploymentSection",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('openAIFunctionName'))]"
            ],
            "properties": {
                "azPowerShellVersion": "3.0",
                "scriptContent": "start-sleep -Seconds 300",
                "cleanupPreference": "Always",
                "retentionInterval": "PT1H"
            }
        }
    ]
}
